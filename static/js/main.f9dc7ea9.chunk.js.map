{"version":3,"sources":["App.tsx","generator.ts","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","container","height","position","overflowY","tableContainer","fab","bottom","right","App","useState","tasks","setTasks","handleGenerateTasks","amount","maxNumber","result","Array","i","num1","Math","round","random","num2","push","generate","useEffect","classes","Container","maxWidth","className","Table","stickyHeader","TableHead","TableRow","TableCell","TableBody","map","row","key","Fab","color","aria-label","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sSAcA,IAAMA,EAAYC,YAAW,CAC3BC,UAAW,CACTC,OAAQ,OACRC,SAAU,WACVC,UAAW,UAEbC,eAAgB,CACdD,UAAW,SACXF,OAAQ,QAEVI,IAAK,CACHH,SAAU,WACVI,OAAQ,GACRC,MAAO,MA+CIC,MA3Cf,WAAgB,IAAD,EACaC,mBAA4B,IADzC,mBACNC,EADM,KACCC,EADD,KAGPC,EAAsB,kBAAMD,EC5B7B,SACLE,GAKA,IAHoB,IADpBC,EACmB,uDADC,GAEdC,EAAS,IAAIC,MAEVC,EAAI,EAAGA,EAAIJ,EAAQI,IAAK,CAC/B,IAAMC,EAAOC,KAAKC,MAAMD,KAAKE,SAAWP,GAClCQ,EAAOH,KAAKC,MAAMD,KAAKE,SAAWP,GACxCC,EAAOQ,KAAK,CAAEL,OAAMI,OAAMP,OAAQG,EAAOI,IAG3C,OAAOP,EDgBoCS,CAAS,MAEpDC,qBAAU,WACRb,MACC,IAEH,IAAMc,EAAU5B,IAEhB,OACE,kBAAC6B,EAAA,EAAD,CAAWC,SAAS,KAAKC,UAAWH,EAAQ1B,WAC1C,yBAAK6B,UAAWH,EAAQtB,gBACtB,kBAAC0B,EAAA,EAAD,CAAOC,cAAY,GACjB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,gBACA,kBAACA,EAAA,EAAD,mBAGJ,kBAACC,EAAA,EAAD,KACGzB,EAAM0B,KAAI,SAACC,EAAKpB,GAAN,OACT,kBAACgB,EAAA,EAAD,CAAUK,IAAKrB,GACb,kBAACiB,EAAA,EAAD,eAAeG,EAAInB,KAAnB,cAA6BmB,EAAIf,OACjC,kBAACY,EAAA,EAAD,KAAYG,EAAItB,eAM1B,kBAACwB,EAAA,EAAD,CACEC,MAAM,UACNC,aAAW,UACXZ,UAAWH,EAAQrB,IACnBqC,QAAS9B,GAET,kBAAC,IAAD,SExDY+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,oCACE,kBAACC,EAAA,EAAD,MACA,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f9dc7ea9.chunk.js","sourcesContent":["import {\n  Container,\n  Fab,\n  makeStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\nimport RefreshIcon from \"@material-ui/icons/Refresh\";\nimport React, { useEffect, useState } from \"react\";\nimport { ArithmeticTasks, generate } from \"./generator\";\n\nconst useStyles = makeStyles({\n  container: {\n    height: \"100%\",\n    position: \"relative\",\n    overflowY: \"hidden\",\n  },\n  tableContainer: {\n    overflowY: \"scroll\",\n    height: \"100%\",\n  },\n  fab: {\n    position: \"absolute\",\n    bottom: 32,\n    right: 48,\n  },\n});\n\nfunction App() {\n  const [tasks, setTasks] = useState<ArithmeticTasks[]>([]);\n\n  const handleGenerateTasks = () => setTasks(generate(40));\n\n  useEffect(() => {\n    handleGenerateTasks();\n  }, []);\n\n  const classes = useStyles();\n\n  return (\n    <Container maxWidth=\"md\" className={classes.container}>\n      <div className={classes.tableContainer}>\n        <Table stickyHeader>\n          <TableHead>\n            <TableRow>\n              <TableCell>Aufgabe</TableCell>\n              <TableCell>Ergebnis</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {tasks.map((row, i) => (\n              <TableRow key={i}>\n                <TableCell>{`${row.num1} * ${row.num2}`}</TableCell>\n                <TableCell>{row.result}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </div>\n      <Fab\n        color=\"primary\"\n        aria-label=\"refresh\"\n        className={classes.fab}\n        onClick={handleGenerateTasks}\n      >\n        <RefreshIcon />\n      </Fab>\n    </Container>\n  );\n}\n\nexport default App;\n","export type ArithmeticTasks = {\r\n  num1: number;\r\n  num2: number;\r\n  result: number;\r\n};\r\n\r\nexport function generate(\r\n  amount: number,\r\n  maxNumber: number = 99\r\n): ArithmeticTasks[] {\r\n  const result = new Array<ArithmeticTasks>();\r\n\r\n  for (let i = 0; i < amount; i++) {\r\n    const num1 = Math.round(Math.random() * maxNumber);\r\n    const num2 = Math.round(Math.random() * maxNumber);\r\n    result.push({ num1, num2, result: num1 * num2 });\r\n  }\r\n\r\n  return result;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { CssBaseline } from \"@material-ui/core\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <>\n      <CssBaseline />\n      <App />\n    </>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}